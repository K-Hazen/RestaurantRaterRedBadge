
@* This is like decalring a variable for the page. We want to be able to access the properties of Restaurant *@

@model RestaurantRater.Models.Restaurant



@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@* We want to create it with data from the previous model*@

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Restaurant</h4>
        <hr />

        @* What this is doing is saying when I have errors I am going to show them in a ul
            True says -- I don't want to show any property errors because we have them elsewhere
           String is default error, but we don't want red text
            new = @class is an html attributes property which we need because this is Razor
            Class values is text-danger *@

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })  


        @* Below = giving the form a hidden input tag for rest ID
            Why --> when it gets packaged up to send we need a way to validate what is moving, so we need rest ID
            The problem is we have just a random input field where people could change the restID
            So hidden field hides the primary key from the end user *@

        @Html.HiddenFor(model => model.RestaurantID)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(modle => Model.Name, new { htmlAttributes = new {   @class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(modle => Model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(modle => Model.Rating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" on /> |
                @Html.ActionLink("Back to Index", "Index")
            </div>
        </div>

    </div>
}

